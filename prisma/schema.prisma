
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Fabric {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code         String   @unique
  name         String
  construction String?
  gsm          Int?
  widthCm      Int?     @map("width_cm")
  minOrderM    Int?     @map("min_order_m")
  basePrice    Decimal? @map("base_price") @db.Decimal(10, 2)
  finishes     String[]
  insertedAt   DateTime @default(now()) @map("inserted_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  variants     Variant[]
  fabricTrims  FabricTrim[]
  fabricCerts  FabricCert[]
  priceBreaks  PriceBreak[]
  reservations Reservation[]

  @@map("fabric")
}

model Variant {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fabricId String  @map("fabric_id") @db.Uuid
  label    String?
  hex      String?
  imageUrl String? @map("image_url")

  fabric         Fabric          @relation(fields: [fabricId], references: [id], onDelete: Cascade)
  sampleRequests SampleRequest[]

  @@map("variant")
}

model Trim {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type        String?
  description String?
  supplierSku String? @map("supplier_sku")
  leadDays    Int?    @map("lead_days")
  minUnits    Int?    @map("min_units")
  imageUrl    String? @map("image_url")

  fabricTrims FabricTrim[]

  @@map("trim")
}

model FabricTrim {
  fabricId    String  @map("fabric_id") @db.Uuid
  trimId      String  @map("trim_id") @db.Uuid
  recommended Boolean @default(false)

  fabric Fabric @relation(fields: [fabricId], references: [id])
  trim   Trim   @relation(fields: [trimId], references: [id])

  @@id([fabricId, trimId])
  @@map("fabric_trim")
}

model Cert {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique

  fabricCerts FabricCert[]

  @@map("cert")
}

model FabricCert {
  fabricId String  @map("fabric_id") @db.Uuid
  certId   String  @map("cert_id") @db.Uuid
  url      String?

  fabric Fabric @relation(fields: [fabricId], references: [id])
  cert   Cert   @relation(fields: [certId], references: [id])

  @@id([fabricId, certId])
  @@map("fabric_cert")
}

model PriceBreak {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fabricId   String  @map("fabric_id") @db.Uuid
  minMeters  Int?    @map("min_meters")
  price      Decimal @db.Decimal(10, 2)

  fabric Fabric @relation(fields: [fabricId], references: [id])

  @@map("price_break")
}

model SampleRequest {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  variantId String   @map("variant_id") @db.Uuid
  metres    Int?
  createdAt DateTime @default(now()) @map("created_at")

  variant Variant @relation(fields: [variantId], references: [id])

  @@map("sample_request")
}

model Reservation {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  fabricId  String   @map("fabric_id") @db.Uuid
  meters    Int?
  createdAt DateTime @default(now()) @map("created_at")

  fabric Fabric @relation(fields: [fabricId], references: [id])

  @@map("reservation")
}

model Event {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  name      String
  props     Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@map("event")
}
